var tiMin;
var tiSec;
var brMin;
var brSec;
var cont;
var verify=false;
  
const Sength=(props)=>{
  return(
  <div id="display">
      <h1 style={{"color":"red","fontFamily":"Digital","textAlign":"center"}}>
      <span id="dMin"  style={{"color":"red","fontFamily":"Digital","textAlign":"center"}} onClick={props.count}>{props.show.min}</span>:
        <span id="dSec"  style={{"color":"red","fontFamily":"Digital","textAlign":"center"}}>{props.show.sec}</span>
      </h1>
     
      
      <span ><p id="playPause" onClick={props.count}>pl/ps</p><p id="refresh" onClick={props.refresh}>refsh</p></span>
  </div>
  )
}

class Timer extends React.Component{
  constructor(props){
    super(props);
    this.state={
      timer:{
        min:"00",
        sec:"00"
      },
      break:{
        min:"00",
        sec:"00"
      }
    }
    this.displayMin=this.displayMin.bind(this);
    this.displaySec=this.displaySec.bind(this);
    this.displayBreakMin=this.displayBreakMin.bind(this);
    this.displayBreakSec=this.displayBreakSec.bind(this);
    this.countDown=this.countDown.bind(this);
    this.refresh=this.refresh.bind(this);
    this.secCount=this.secCount.bind(this);
    this.getSec=this.getSec.bind(this);
    this.getMin=this.getMin.bind(this);
    this.getBrSec=this.getBrSec.bind(this);
    this.getBrMin=this.getBrMin.bind(this);
  }
  getMin(){
          if(this.state.timer.sec==="00"){
            return this.state.timer.min-1
          }
          return this.state.timer.min
        
  }
  getSec(){
          if(this.state.timer.sec==="00"){
            return 59
          }
          return this.state.timer.sec-1
        
  }
  getBrMin(){
          if(this.state.break.sec==="00"){
            return this.state.break.min-1
          }
          return this.state.break.min
        
  }
  getBrSec(){
          if(this.state.break.sec==="00"){
            return 59
          }
          return this.state.break.sec-1
        
  }
  //show minutes in Dom
displayMin(event){ 
  tiMin=event.target.value
  if(event.target.value<1||event.target.value>500000){
  return this.setState(
    {
      timer:{
    min:"00",
      sec:this.state.timer.sec
                  },
      break:{
        min:this.state.break.min,
        sec:this.state.break.sec
      }
  
})
     }else{
    return this.setState({
      timer:{
    min:event.target.value,
      sec:this.state.timer.sec
                  },
      break:{
        min:this.state.break.min,
        sec:this.state.break.min
      }
      })
     }
}
  //show seconds in dom
  displaySec(event){
    tiSec=event.target.value
  if(event.target.value<1){
  return this.setState(
    {
      timer:{
    min:this.state.timer.min,
      sec:"00"
                  },
      break:{
        min:this.state.break.min,
        sec:this.state.break.sec
      }
  
})
     }
    else if(event.target.value>59||this.state.timer.sec>59){
  return this.setState(
    {
      timer:{
    min:this.state.timer.min,
      sec:"00"
                  },
      break:{
        min:this.state.break.min,
        sec:this.state.break.sec
      }
  
})
    }
    return this.setState({
      timer:{
    min:this.state.timer.min,
      sec:event.target.value
                  },
      break:{
        min:this.state.break.min,
        sec:this.state.break.sec
      }
    })
  
}/******
handler for onchange of break length
*********/
  displayBreakMin(event){
    brMin=event.target.value
  if(event.target.value<1||event.target.value>500000){
  return this.setState(
    {
      timer:{
    min:this.state.timer.min,
      sec:this.state.timer.sec
                  },
      break:{
        min:"00",
        sec:this.state.break.sec
      }
  
})
     }else{
    return this.setState({
      timer:{
    min:this.state.timer.min,
      sec:this.state.timer.sec
                  },
      break:{
    min:event.target.value,
      sec:this.state.break.sec
                  }
      })
     }
}
  //show seconds in dom
  displayBreakSec(event){
    
brSec=event.target.value
  if(event.target.value<1){
  return this.setState(
    {
      timer:{
    min:this.state.timer.min,
      sec:this.state.timer.sec
                  },
      break:{
    min:this.state.break.min,
      sec:"00"
                  }
  
})
     }
    else if(event.target.value>59||this.state.timer.sec>59){
  return this.setState(
    {
      timer:{
    min:this.state.timer.min,
      sec:this.state.timer.sec
                  },
      break:{
    min:this.state.break.min,
      sec:"00"
                  }
  
})
    }
    return this.setState({
      timer:{
    min:this.state.timer.min,
      sec:this.state.timer.sec
                  },
      break:{
    min:this.state.break.min,
      sec:event.target.value
                  }
    })
  
}
  //seonds countdown
  secCount(){
          if(this.state.timer.min<=0&&this.state.timer.sec<=0){
 if(this.state.break.min<=0&&this.state.break.sec<=0||this.state.break.min<="00"&&this.state.timer.sec<="00"){
   clearInterval(cont)
   return this.setState({
     timer:{
       min:"00",
       sec:"00"
     },
     break:{
       min:"00",
       sec:"00"
     }
   })
 }
     this.setState({
       timer:{
        min:this.state.break.min,
        sec:this.state.break.sec
      },
      break:{
        min:this.state.break.min,
        sec:this.state.break.sec
      }
     })
    }
    if(this.state.timer.sec<=0){
      this.setState({
 timer:{
        min:this.state.timer.min-1,
        sec:60
      },
      break:{
        min:this.state.break.min-1,
        sec:60
       }
      })
    }
          this.setState((state,props)=>{
 return {
            timer:{
        min:state.timer.min,
        sec:state.timer.sec-1
      },
      break:{
        min:state.break.min,
        sec:state.break.sec-1
       }
          }
      })
    
        }
//count down function 
  countDown(){
    if(verify===false){
      verify=true
    
 this.setState({
 timer:{
        min:this.getMin(),
        sec:this.getSec()
      },
      break:{
        min:this.getBrMin(),
        sec:this.getBrSec()
       }
      })
     if(this.state.timer.min>-1&&this.state.timer.sec>0||this.state.timer.min>0){
   cont= setInterval(this.secCount,1000)
      }
    }
    else{
      verify=false;
      clearInterval(cont)
    }
    
  }
  refresh(){
    this.setState({
      timer:{
        min:tiMin,
        sec:tiSec
      },
      break:{
      min:brMin,
        sec:brSec
    }
    })
  }
  

render(){
  return(
  <div>
      <div id="session-label">
        <h2 style={{"color":"red"}}>Sesson length</h2>
        <label>MIn:
          <input id="min" type="number" onChange={this.displayMin} /><button><i className="fa fa-arrow-down fa-2x"/>
        </button>
<button >
          <i className="fa fa-arrow-up fa-2x"/>
        </button></label><br/>
         <label>Sec:   
           <input id="sec" type="number" onChange={this.displaySec}/></label><button><i className="fa fa-arrow-down fa-2x"/>
        </button>
<button >
          <i className="fa fa-arrow-up fa-2x"/>
        </button><br/>
        </div>
      
      <div id="break-label">
        <h2 style={{"color":"red"}}>Break length</h2>
        <label>MIn:
          <input id="bmin" type="number" onChange={this.displayBreakMin} />
          <button>
          <i className="fa fa-arrow-down fa-2x"/>
        </button>
<button>
  <i className="fa fa-arrow-up fa-2x"/>
        </button></label><br/>
         <label>Sec:   
           <input id="bsec" type="number" onChange={this.displayBreakSec}/><button>
          <i className="fa fa-arrow-down fa-2x"/>
        </button>
<button >
          <i className="fa fa-arrow-up fa-2x"/>
        </button></label><br/>
     
        </div>
      <Sength show={this.state.timer}count={this.countDown} refresh={this.refresh}/>
   </div>
  )
 }
}

ReactDOM.render(<Timer />, document.getElementById('wrapper'));


